spring:

  main:
    allow-bean-definition-overriding: true
    web-application-type : reactive
  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: gateway-client0
            client-secret: TBO4HZwfhHtUJDkpIGi9YFjdLUrsiE96
            scope: openid
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
        provider:
          keycloak:
            issuer-uri: http://localhost:8080/realms/microservices
            jwk-set-uri: http://localhost:8080/realms/microservices/protocol/openid-connect/certs
  cloud:
    gateway:
      routes:
        - id: user
          uri: http://localhost:8083
          predicates:
            - Path=/api/users/**
          filters:
            - name: RequestHeaderToRequestUri
              args:
                name: Authorization
        - id: auth
          uri: http://localhost:8083
          predicates:
              - Path=/api/auth/**
        - id: produit
          uri: http://localhost:8085
          predicates:
            - Path=/api/produits/**
          filters:
            - name: RequestHeaderToRequestUri
              args:
                name: Authorization
eureka:
  instance:
    hostname: localhost
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://${eureka.instance.hostname}:8761/eureka/
keycloak:
  server-url: http://localhost:8080
  resource: gateway-client0
  realm: microservices
  client-id: gateway-client0
  client-secret: TBO4HZwfhHtUJDkpIGi9YFjdLUrsiE96

server:
  port: 8222




